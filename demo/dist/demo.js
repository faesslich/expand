/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Expand", [], factory);
	else if(typeof exports === 'object')
		exports["Expand"] = factory();
	else
		root["Expand"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/demo.js":
/*!************************!*\
  !*** ./assets/demo.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_expand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/expand */ \"../src/expand.js\");\n/* harmony import */ var _src_expand__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_src_expand__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable */\n\n/**\r\n * default usage\r\n * @type {Expand}\r\n */\n\nif (document.querySelector('.expand-js-outer')) {\n  const defaultDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())();\n}\n/**\r\n * responsive example with custom selector\r\n * @type {Element}\r\n */\n\n\nconst responsiveSelector = document.querySelector('.expand-responsive-wrapper');\n\nif (responsiveSelector) {\n  const responsiveDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: responsiveSelector,\n    visibleSlides: {\n      768: 2,\n      1024: 3\n    }\n  });\n}\n/**\r\n * arrow navigation example with custom selector\r\n * @type {Element}\r\n */\n\n\nconst arrowNavSelector = document.querySelector('.expand-arrow-navigation-wrapper');\n\nif (arrowNavSelector) {\n  const arrowNavDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: arrowNavSelector,\n    arrows: true\n  });\n}\n/**\r\n * responsive expand with a responsive arrow navigation example with custom selector\r\n * @type {Element}\r\n */\n\n\nconst responsiveArrowNavSelector = document.querySelector('.expand-responsive-and-arrow-navigation-wrapper');\n\nif (responsiveArrowNavSelector) {\n  const responsiveArrowNavDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: responsiveArrowNavSelector,\n    visibleSlides: {\n      768: 2,\n      1024: 3\n    },\n    arrows: true,\n    arrowsVisible: {\n      100: false,\n      1024: true\n    }\n  });\n}\n/**\r\n * responsive expand with a responsive arrow navigation example with custom selector\r\n * @type {Element}\r\n */\n\n\nconst customArrowNavSelector = document.querySelector('.expand-custom-arrow-navigation-wrapper');\n\nif (customArrowNavSelector) {\n  const customArrowNavDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: customArrowNavSelector,\n    visibleSlides: {\n      768: 2,\n      1024: 5\n    },\n    arrows: true,\n    arrowsVisible: {\n      100: false,\n      1024: true\n    },\n    prevArrowClass: 'expand-js--prev expand-custom-arrows',\n    nextArrowClass: 'expand-js--next expand-custom-arrows',\n    prevArrowInner: '<span>«</span>',\n    nextArrowInner: '<span>»</span>'\n  });\n}\n/**\r\n * responsive expand with a responsive pagination example\r\n * @type {Element}\r\n */\n\n\nconst paginationSelector = document.querySelectorAll('.expand-pagination-wrapper');\n\nif (paginationSelector) {\n  for (let i = 0; i < paginationSelector.length; i += 1) {\n    const paginationDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n      selector: paginationSelector[i],\n      visibleSlides: {\n        768: 2,\n        1024: 3\n      },\n      arrows: true,\n      arrowsVisible: {\n        100: false,\n        1024: true\n      },\n      pagination: true,\n      // paginationVisible: true,\n      paginationVisible: {\n        0: false,\n        320: true\n      }\n    }, // dataOptions\n    JSON.parse(paginationSelector[i].dataset.options));\n  }\n}\n/**\r\n * responsive expand with a responsive arrow navigation example with custom selector\r\n * @type {Element}\r\n */\n\n\nconst centerModeSelector = document.querySelector('.expand-center-mode-wrapper');\n\nif (centerModeSelector) {\n  const centerModeDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: centerModeSelector,\n    visibleSlides: {\n      768: 2,\n      1024: 5\n    },\n    arrows: true,\n    centerMode: true\n  });\n}\n/**\r\n * responsive expand with a responsive arrow navigation example with custom selector\r\n * @type {Element}\r\n */\n\n\nconst centerModeRangeSelector = document.querySelector('.expand-center-mode-range-wrapper');\n\nif (centerModeRangeSelector) {\n  const centerModeRangeDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: centerModeRangeSelector,\n    visibleSlides: {\n      768: 2,\n      1024: 5\n    },\n    arrows: true,\n    centerMode: true,\n    centerModeRange: true\n  });\n}\n\nconst centerModeRangeSelector2 = document.querySelector('.expand-center-mode-range-wrapper2');\n\nif (centerModeRangeSelector2) {\n  const centerModeRangeDemo2 = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: centerModeRangeSelector2,\n    visibleSlides: {\n      768: 2,\n      1024: 7\n    },\n    arrows: true,\n    centerMode: true,\n    centerModeRange: true\n  });\n}\n/**\r\n * expand with autoplay enabled and with custom selector\r\n * @type {Element}\r\n */\n\n\nconst autoplaySelector = document.querySelector('.expand-autoplay-wrapper');\n\nif (autoplaySelector) {\n  const autoplayDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: autoplaySelector,\n    autoplay: true,\n    autoplayDuration: 4000\n  });\n}\n/**\r\n * expand with multiple slides to slide on trigger\r\n * @type {Element}\r\n */\n\n\nconst multiSlideSelector = document.querySelector('.expand-multislide-wrapper');\n\nif (multiSlideSelector) {\n  const multiSlideDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: multiSlideSelector,\n    slidesToSlide: 2\n  });\n}\n/**\r\n * expand with rtl enabled\r\n * @type {Element}\r\n */\n\n\nconst rtlSelector = document.querySelector('.expand-rtl-wrapper');\n\nif (rtlSelector) {\n  const rtlDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: rtlSelector,\n    rtl: true\n  });\n}\n/**\r\n * expand with keyboard usage enabled\r\n * @type {Element}\r\n */\n\n\nconst keyboardSelector = document.querySelector('.expand-keyboard-wrapper');\n\nif (keyboardSelector) {\n  const keyboardDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: keyboardSelector,\n    keyboard: true\n  });\n}\n/**\r\n * expand with more or less all features enabled at once\r\n * @type {Element}\r\n */\n\n\nconst featureSeptionSelector = document.querySelector('.expand-featureseption-wrapper');\n\nif (featureSeptionSelector) {\n  const featureSeptionDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: featureSeptionSelector,\n    duration: 300,\n    easeMode: 'ease-out',\n    visibleSlides: {\n      100: 1,\n      768: 2,\n      1024: 3\n    },\n    startIndex: 0,\n    draggable: true,\n    multipleDrag: true,\n    triggerDistance: 30,\n    slidesToSlide: 2,\n    autoplay: true,\n    autoplayDuration: 5000,\n    arrows: true,\n    arrowsVisible: {\n      100: false,\n      1024: true,\n      1920: false\n    },\n    prevArrowClass: 'expand-js--prev expand-custom-arrows',\n    nextArrowClass: 'expand-js--next expand-custom-arrows',\n    prevArrowInner: '<span>«</span>',\n    nextArrowInner: '<span>»</span>',\n    rtl: true,\n    keyboard: true,\n    loop: true\n  });\n}\n/**\r\n * multiple expand instances fired by one selector node list\r\n * @type {NodeListOf<Element>}\r\n */\n\n\nconst multiInstancesSelectors = document.querySelectorAll('.expand-multi-instances-wrapper');\n\nif (multiInstancesSelectors) {\n  for (const multiInstancesSelector of multiInstancesSelectors) {\n    const multiInstancesDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n      selector: multiInstancesSelector,\n      duration: 300,\n      easeMode: 'ease-out',\n      useCssFile: true,\n      visibleSlides: {\n        100: 1,\n        768: 2\n      },\n      startIndex: 0,\n      draggable: true,\n      multipleDrag: true,\n      arrows: true,\n      triggerDistance: 30,\n      rtl: false,\n      loop: true\n    });\n  }\n}\n/**\r\n * expand with ootb events\r\n * @type {Element}\r\n */\n\n\nconst eventBindingSelector = document.querySelector('.expand-event-binding-wrapper');\n\nif (eventBindingSelector) {\n  const eventBindingDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: eventBindingSelector,\n    onInit: () => console.log('I got initialised'),\n    onChange: () => {\n      console.log('I got changed'), eventBindingSelector.style.backgroundColor = \"blue\", eventBindingSelector.style.padding = \"2rem\";\n    }\n  });\n}\n/**\r\n * expand with callback\r\n * @type {Element}\r\n */\n\n\nconst prevBtnCallback = document.querySelector('#goToPrevCallback');\nconst nextBtnCallback = document.querySelector('#goToNextCallback');\nconst callbackSelector = document.querySelector('.expand-callback-usage-wrapper');\n\nif (callbackSelector) {\n  const callbackDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: callbackSelector,\n    arrows: true,\n    visibleSlides: {\n      768: 2,\n      1024: 3\n    }\n  }); // the number inside of the used methods tell the slider how many slides to change\n\n  prevBtnCallback.addEventListener('click', () => callbackDemo.prevSlide(3, () => {\n    document.querySelector('.callback-text-output').innerHTML = 'Callback for <b>prevSlide</b> after one second';\n    console.log('Callback for prevSlide after one second');\n  }, 1000));\n  nextBtnCallback.addEventListener('click', () => callbackDemo.nextSlide(3, () => {\n    document.querySelector('.callback-text-output').innerHTML = 'Callback for <b>nextSlide</b> after one second';\n    console.log('Callback for nextSlide after one second');\n  }, 1000));\n}\n/**\r\n * bind instance to elements which are not part of the slider itself\r\n * @type {Element}\r\n */\n\n\nconst prevBtn = document.querySelector('#goToPrev');\nconst nextBtn = document.querySelector('#goToNext');\nconst externalNavSelector = document.querySelector('.expand-api-navigate-binding-wrapper');\n\nif (externalNavSelector) {\n  const externalNavDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: externalNavSelector,\n    visibleSlides: {\n      768: 2,\n      1024: 3\n    },\n    arrows: true,\n    arrowsVisible: {\n      100: false,\n      1024: true\n    }\n  }); // the number inside of the used methods tell the slider how many slides to change\n\n  prevBtn.addEventListener('click', () => externalNavDemo.prevSlide(3));\n  nextBtn.addEventListener('click', () => externalNavDemo.nextSlide(3));\n}\n/**\r\n * easy manipulate expand and append or prepend new items\r\n * @type {Element}\r\n */\n\n\nconst prependBtn = document.querySelector('#prependButton');\nconst appendBtn = document.querySelector('#appendButton');\nconst manipulateItemsSelector = document.querySelector('.expand-api-manipulate-items-wrapper');\n\nif (manipulateItemsSelector) {\n  const manipulateItemsDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: manipulateItemsSelector,\n    visibleSlides: 2,\n    arrows: true\n  });\n  prependBtn.addEventListener('click', () => {\n    const prependItem = document.createElement('div');\n    prependItem.innerHTML = 'I am prepended!';\n    manipulateItemsDemo.prependElem(prependItem);\n  });\n  appendBtn.addEventListener('click', () => {\n    const appendItem = document.createElement('div');\n    appendItem.innerHTML = 'I am appended!';\n    manipulateItemsDemo.appendElem(appendItem);\n  });\n}\n/**\r\n * add settings to expand via data attribute or any JSON string.\r\n * JSON String needs to get parsed as in this example!\r\n * @type {Element}\r\n */\n\n\nconst dataOptionsSelector = document.querySelector('.expand-api-data-options-wrapper');\n\nif (dataOptionsSelector) {\n  const dataOptionsDemo = new (_src_expand__WEBPACK_IMPORTED_MODULE_0___default())({\n    selector: dataOptionsSelector,\n    visibleSlides: 2,\n    arrows: true\n  }, // dataOptions\n  JSON.parse(dataOptionsSelector.dataset.options));\n}\n\n//# sourceURL=webpack://Expand/./assets/demo.js?");

/***/ }),

/***/ "../src/expand.js":
/*!************************!*\
  !*** ../src/expand.js ***!
  \************************/
/***/ ((module, exports) => {

eval("/**\r\n * ExpandJS\r\n *\r\n * @author Fabian Esser <post@faesslich.de>\r\n * @github https://github.com/faesslich/expand\r\n * @description Expand - the lightweight pure JS carousel/slider\r\n * @version 1.0.0\r\n */\nclass Expand {\n  /**\r\n   * Constructor\r\n   * @param options\r\n   * @param dataOptions\r\n   */\n  constructor(options, dataOptions) {\n    const eventHandlers = ['resizeHandler', 'clickHandler', 'touchstartHandler', 'touchendHandler', 'touchmoveHandler', 'mousedownHandler', 'mouseupHandler', 'mouseleaveHandler', 'mousemoveHandler'];\n    this.config = Expand.settingsOverride(options, dataOptions);\n    this.selector = typeof this.config.selector === 'string' ? document.querySelector(this.config.selector) : this.config.selector; // Create global references\n\n    this.selectorWidth = this.selector.offsetWidth;\n    this.innerItems = [].slice.call(this.selector.children);\n    this.curSlide = this.config.loop ? this.config.startIndex % this.innerItems.length : Math.max(0, Math.min(this.config.startIndex, this.innerItems.length - this.visibleSlides)) || 0; // Event handler binding\n\n    eventHandlers.forEach(method => {\n      this[method] = this[method].bind(this);\n    });\n    this.slidesAmount();\n    this.init();\n  }\n  /**\r\n   * Overrides default settings with custom ones.\r\n   * @param options\r\n   * @param dataOptions\r\n   * @returns {\r\n   * {\r\n   * useCssFile: boolean, centerModeRange: boolean, prevArrowInner: string, nextArrowInner: string, arrows: boolean,\r\n   * autoplayDuration: number, prevArrowClass: string, duration: number, startIndex: number, nextArrowClass: string,\r\n   * multipleDrag: boolean, draggable: boolean, activeClass: boolean, onInit: function(), loop: boolean,\r\n   * gap: number, selector: string, visibleSlides: number, slidesToSlide: number, keyboard: boolean,\r\n   * onChange: function(), cssCustomPath: string, triggerDistance: number, centerMode: boolean,\r\n   * itemSelector: string, rtl: boolean, autoplay: boolean, easeMode: string, arrowsVisible: boolean,\r\n   * pagination: boolean, paginationVisible: boolean, paginationType: string, paginationContainer: string,\r\n   * paginationItemSelector: string, paginationItemActiveClass: string\r\n   * }\r\n   * }\r\n   */\n\n\n  static settingsOverride(options, dataOptions) {\n    const defaults = {\n      selector: '.expand-js-outer',\n      itemSelector: '.expand-js--item',\n      visibleSlides: 1,\n      useCssFile: true,\n      cssCustomPath: '',\n      startIndex: 0,\n      draggable: true,\n      multipleDrag: true,\n      triggerDistance: 100,\n      loop: true,\n      rtl: false,\n      duration: 500,\n      easeMode: 'ease-out',\n      slidesToSlide: 1,\n      activeClass: true,\n      centerMode: false,\n      centerModeRange: false,\n      pagination: false,\n      paginationVisible: true,\n      paginationType: '',\n      paginationContainer: 'expand-pagination',\n      paginationItemSelector: '',\n      paginationItemActiveClass: 'active',\n      autoplay: false,\n      autoplayDuration: 3000,\n      arrows: false,\n      arrowsVisible: true,\n      prevArrowClass: 'expand-js--prev',\n      nextArrowClass: 'expand-js--next',\n      prevArrowInner: '‹',\n      nextArrowInner: '›',\n      gap: 0,\n      keyboard: false,\n      onInit: () => {},\n      onChange: () => {}\n    };\n    return { ...defaults,\n      ...options,\n      ...dataOptions\n    };\n  }\n  /**\r\n   * Attaches listeners to required events.\r\n   */\n\n\n  attachEvents() {\n    // If element is draggable / swipeable\n    if (this.config.draggable) {\n      this.pointerDown = false;\n      this.drag = {\n        startXAxis: 0,\n        endXAxis: 0,\n        startYAxis: 0,\n        endYAxis: 0,\n        dragOff: null,\n        preventClick: false\n      }; // add event handlers\n\n      window.addEventListener('resize', this.resizeHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('click', this.clickHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('touchstart', this.touchstartHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('touchend', this.touchendHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('touchmove', this.touchmoveHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('mousedown', this.mousedownHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('mouseup', this.mouseupHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('mouseleave', this.mouseleaveHandler, {\n        passive: false\n      });\n      this.selector.addEventListener('mousemove', this.mousemoveHandler, {\n        passive: false\n      });\n    }\n  }\n  /**\r\n   * Builds the markup and attaches listeners to required events.\r\n   */\n\n\n  init() {\n    this.attachEvents();\n    this.selector.classList.add('expand-outer'); // Build container and slide to current item\n\n    this.sliderContainerCreate(); // trigger autoplay if enabled\n\n    if (this.config.autoplay) {\n      this.myTimer = setInterval(() => this.nextSlide(), this.config.autoplayDuration);\n    } // add arrows to slider\n\n\n    if (this.config.arrows) {\n      this.arrowsVisibility();\n      this.arrowsInit();\n    } // add keyboard navigation to slider\n\n\n    if (this.config.keyboard) {\n      this.keyboardNavigation();\n    } // add active classes to slider\n\n\n    if (this.config.useCssFile && this.config.activeClass) {\n      this.activeClass();\n    } // add pagination to slider\n\n\n    if (this.config.pagination) {\n      this.paginationVisibility();\n      this.paginationInit();\n      this.paginationUpdate();\n    }\n\n    this.config.onInit.call(this);\n  }\n  /**\r\n   * Build container and slide to current item\r\n   */\n\n\n  sliderContainerCreate() {\n    this.slideItemWrapper = this.createSliderOuterWrapper();\n    this.slidesCollection = this.getSlidesCollection();\n    this.createSliderInnerWrapper(); // Add fragment to the frame\n\n    this.selector.innerHTML = '';\n    this.slideItemWrapper.appendChild(this.sliderInnerWrapper);\n    this.sliderInnerWrapper.appendChild(this.slidesCollection);\n    this.selector.appendChild(this.slideItemWrapper); // Go to currently active slide after initial build\n\n    this.slideToCurrent();\n  }\n  /**\r\n   * Create frame and apply styling\r\n   */\n\n\n  createSliderInnerWrapper() {\n    this.sliderInnerWrapper = document.createElement('div');\n    this.sliderInnerWrapper.classList.add('expand-js--container');\n    this.sliderInnerWrapper.style.width = this.getCalculatedItemWidth() + 'px';\n    this.isTransition();\n\n    if (this.config.centerMode) {\n      this.sliderInnerWrapper.classList.add('-is-center-mode');\n\n      if (this.config.centerModeRange) {\n        this.sliderInnerWrapper.classList.add('-is-center-range');\n      }\n    }\n  }\n  /**\r\n   *\r\n   * @returns {HTMLDivElement}\r\n   */\n\n\n  createSliderOuterWrapper() {\n    const slideItemWrapper = document.createElement('div');\n    slideItemWrapper.classList.add('expand-js'); // inline css or with classes for more customizability\n\n    if (this.config.useCssFile) {\n      slideItemWrapper.classList.add('-hidden');\n\n      if (this.config.rtl) {\n        slideItemWrapper.classList.add('-rtl');\n      }\n\n      if (this.config.pagination) {\n        slideItemWrapper.classList.add('-is-pagination');\n      }\n    } else {\n      slideItemWrapper.style.overflow = 'hidden';\n      slideItemWrapper.style.direction = this.config.rtl ? 'rtl' : 'ltr'; // rtl or ltr\n    }\n\n    return slideItemWrapper;\n  }\n  /**\r\n   * Create a document fragment to put slides into it\r\n   * @returns {DocumentFragment}\r\n   */\n\n\n  getSlidesCollection() {\n    const slides = document.createDocumentFragment(); // Loop through the slides, add styling and add them to document fragment\n\n    if (this.config.loop) {\n      for (let i = this.innerItems.length - this.visibleSlides; i < this.innerItems.length; i += 1) {\n        const element = this.createSliderItem(this.innerItems[i].cloneNode(true));\n        slides.appendChild(element);\n      }\n    }\n\n    for (let i = 0; i < this.innerItems.length; i += 1) {\n      const element = this.createSliderItem(this.innerItems[i]);\n      slides.appendChild(element);\n    }\n\n    if (this.config.loop) {\n      for (let i = 0; i < this.visibleSlides; i += 1) {\n        const element = this.createSliderItem(this.innerItems[i].cloneNode(true));\n        slides.appendChild(element);\n      }\n    }\n\n    return slides;\n  }\n  /**\r\n   * calculate width for each item\r\n   * @returns {number}\r\n   */\n\n\n  getCalculatedItemWidth() {\n    const widthItem = this.selectorWidth / this.visibleSlides;\n    const itemWidthCalc = this.config.loop ? 2 * this.visibleSlides + this.innerItems.length : this.innerItems.length;\n    return Number(widthItem * itemWidthCalc);\n  }\n  /**\r\n   * Expand Slider item creation\r\n   * @param item\r\n   * @returns {*}\r\n   */\n\n\n  createSliderItem(item) {\n    const itemContainer = document.createElement('div');\n\n    if (this.config.useCssFile) {\n      itemContainer.classList.add(this.config.itemSelector.replace('.', ''));\n\n      if (this.config.rtl) {\n        itemContainer.classList.add('f-right');\n      }\n    } else {\n      itemContainer.style.cssFloat = this.config.rtl ? 'right' : 'left';\n    }\n\n    if (this.config.gap) {\n      itemContainer.style.width = `calc(${this.config.loop ? 100 / (this.innerItems.length + this.visibleSlides * 2) : 100 / this.innerItems.length}% - ${this.config.gap}px)`;\n    } else {\n      itemContainer.style.width = `${this.config.loop ? 100 / (this.innerItems.length + this.visibleSlides * 2) : 100 / this.innerItems.length}%`;\n    }\n\n    itemContainer.appendChild(item);\n    return itemContainer;\n  }\n  /**\r\n   * sets amount of visible slides based on viewport (fixed number or object value for responsive changes)\r\n   */\n\n\n  slidesAmount() {\n    if (typeof this.config.visibleSlides === 'number') {\n      this.visibleSlides = this.config.visibleSlides;\n    } else if (typeof this.config.visibleSlides === 'object') {\n      this.visibleSlides = 1;\n      Object.keys(this.config.visibleSlides).forEach(key => {\n        if (window.innerWidth >= Number(key)) {\n          this.visibleSlides = this.config.visibleSlides[Number(key)];\n        }\n      });\n    }\n  }\n  /**\r\n   * Previous slide\r\n   * @param countSlides\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  prevSlide(countSlides = 1, cb, delay) {\n    // early return when there is nothing to slide\n    if (this.innerItems.length <= this.visibleSlides) {\n      return;\n    }\n\n    if (this.config.slidesToSlide > 1) {\n      countSlides = this.config.slidesToSlide;\n    }\n\n    const curSlideCheck = this.curSlide;\n\n    if (this.config.loop) {\n      const isCloneSlide = this.curSlide - countSlides < 0;\n\n      if (isCloneSlide) {\n        const cloneIndex = this.curSlide + this.innerItems.length;\n        const cloneIndexOffset = this.visibleSlides;\n        const newPos = cloneIndex + cloneIndexOffset;\n        const offset = (this.config.rtl ? 1 : -1) * newPos * (this.selectorWidth / this.visibleSlides) + (this.config.gap ? this.config.gap : 0);\n        const dragDistance = this.config.draggable ? this.drag.endXAxis - this.drag.startXAxis : 0;\n        this.isNotTransition();\n        this.sliderInnerWrapper.style.transform = `translate3d(${offset + dragDistance}px, 0, 0)`;\n        this.curSlide = cloneIndex - countSlides;\n      } else {\n        this.curSlide -= countSlides;\n      }\n    } else {\n      this.curSlide = Math.max(this.curSlide - countSlides, 0);\n    }\n\n    if (curSlideCheck !== this.curSlide) {\n      this.slideToCurrent(this.config.loop);\n      this.config.onChange.call(this);\n      this.callbackHandler(cb, delay);\n    }\n  }\n  /**\r\n   * Next slide\r\n   * @param countSlides\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  nextSlide(countSlides = 1, cb, delay) {\n    // early return when there is nothing to slide\n    if (this.innerItems.length <= this.visibleSlides) {\n      return;\n    }\n\n    if (this.config.slidesToSlide > 1) {\n      countSlides = this.config.slidesToSlide;\n    }\n\n    const curSlideCheck = this.curSlide;\n\n    if (this.config.loop) {\n      const isCloneSlide = this.curSlide + countSlides > this.innerItems.length - this.visibleSlides;\n\n      if (isCloneSlide) {\n        this.isNotTransition();\n        const cloneIndex = this.curSlide - this.innerItems.length;\n        const cloneIndexOffset = this.visibleSlides;\n        const newPos = cloneIndex + cloneIndexOffset;\n        const offset = (this.config.rtl ? 1 : -1) * newPos * (this.selectorWidth / this.visibleSlides) + (this.config.gap ? this.config.gap : 0);\n        const dragDistance = this.config.draggable ? this.drag.endXAxis - this.drag.startXAxis : 0;\n        this.sliderInnerWrapper.style.transform = `translate3d(${offset + dragDistance}px, 0, 0)`;\n        this.curSlide = cloneIndex + countSlides;\n      } else {\n        this.curSlide += countSlides;\n      }\n    } else {\n      this.curSlide = Math.min(this.curSlide + countSlides, this.innerItems.length - this.visibleSlides);\n    }\n\n    if (curSlideCheck !== this.curSlide) {\n      this.slideToCurrent(this.config.loop);\n      this.config.onChange.call(this);\n      this.callbackHandler(cb, delay);\n    }\n\n    if (this.config.autoplay) {\n      clearInterval(this.myTimer);\n      this.myTimer = setInterval(() => this.nextSlide(), this.config.autoplayDuration);\n    }\n  }\n  /**\r\n   * Disable transition on slideItem.\r\n   */\n\n\n  isNotTransition() {\n    this.sliderInnerWrapper.style.transition = `all 0ms ${this.config.easeMode}`;\n  }\n  /**\r\n   * Enable transition on slideItem.\r\n   */\n\n\n  isTransition() {\n    this.sliderInnerWrapper.style.transition = `all ${this.config.duration}ms ${this.config.easeMode}`;\n  }\n  /**\r\n   * Go to specific slide method\r\n   * @param index\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  goToSlide(index, cb, delay) {\n    if (this.innerItems.length <= this.visibleSlides) {\n      return;\n    }\n\n    const curSlideCheck = this.curSlide;\n    this.curSlide = this.config.loop ? index % this.innerItems.length : Math.min(Math.max(index, 0), this.innerItems.length - this.visibleSlides);\n\n    if (curSlideCheck !== this.curSlide) {\n      this.slideToCurrent();\n      this.config.onChange.call(this);\n      this.callbackHandler(cb, delay);\n    }\n  }\n  /**\r\n   * Jump to active slide\r\n   * @param isTransition\r\n   */\n\n\n  slideToCurrent(isTransition) {\n    const curSlide = this.config.loop ? this.curSlide + this.visibleSlides : this.curSlide;\n    const offset = (this.config.rtl ? 1 : -1) * curSlide * (this.selectorWidth / this.visibleSlides) + (this.config.gap ? this.config.gap : 0);\n\n    if (isTransition) {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          this.isTransition();\n          this.sliderInnerWrapper.style.transform = `translate3d(${offset + this.config.gap}px, 0, 0)`;\n        });\n      });\n    } else {\n      this.sliderInnerWrapper.style.transform = `translate3d(${offset}px, 0, 0)`;\n    }\n\n    if (this.config.useCssFile && this.config.activeClass) {\n      this.activeClass();\n    }\n\n    if (this.config.pagination) {\n      this.paginationUpdate();\n    }\n  }\n  /**\r\n   * Get new position after dragging\r\n   */\n\n\n  updateAfterDrag() {\n    const movement = (this.config.rtl ? -1 : 1) * (this.drag.endXAxis - this.drag.startXAxis);\n    const moveDistance = Math.abs(movement);\n    const slideableSlides = this.config.multipleDrag ? Math.ceil(moveDistance / (this.selectorWidth / this.visibleSlides)) : this.config.slidesToSlide;\n    const slideToNegativeClone = movement > 0 && this.curSlide - slideableSlides < 0;\n    const slideToPositiveClone = movement < 0 && this.curSlide + slideableSlides > this.innerItems.length - this.visibleSlides;\n\n    if (movement > 0 && moveDistance > this.config.triggerDistance && this.innerItems.length > this.visibleSlides) {\n      this.prevSlide(slideableSlides);\n    } else if (movement < 0 && moveDistance > this.config.triggerDistance && this.innerItems.length > this.visibleSlides) {\n      this.nextSlide(slideableSlides);\n    }\n\n    this.slideToCurrent(slideToNegativeClone || slideToPositiveClone);\n  }\n  /**\r\n   * dynamic item sizes for browser scaling\r\n   */\n\n\n  resizeHandler() {\n    this.slidesAmount();\n\n    if (this.curSlide + this.visibleSlides > this.innerItems.length) {\n      this.curSlide = this.innerItems.length <= this.visibleSlides ? 0 : this.innerItems.length - this.visibleSlides;\n    }\n\n    this.selectorWidth = this.selector.offsetWidth;\n    this.sliderContainerCreate();\n\n    if (this.config.arrows) {\n      this.arrowsVisibility();\n      this.arrowsInit();\n    }\n\n    if (this.config.useCssFile && this.config.activeClass) {\n      this.activeClass();\n    }\n\n    if (this.config.pagination) {\n      this.paginationVisibility();\n      this.paginationInit();\n      this.paginationUpdate();\n    }\n  }\n  /**\r\n   * small method to react on stopping with dragging\r\n   */\n\n\n  stopDragging() {\n    this.drag = {\n      startXAxis: 0,\n      endXAxis: 0,\n      startYAxis: 0,\n      dragOff: null,\n      preventClick: this.drag.preventClick\n    };\n  }\n  /**\r\n   * Remove item method\r\n   * @param index\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  remove(index, cb, delay) {\n    const lowerIndex = index < this.curSlide;\n    const lastItem = this.curSlide + this.visibleSlides - 1 === index;\n\n    if (lowerIndex || lastItem) {\n      this.curSlide -= 1;\n    }\n\n    this.innerItems.splice(index, 1); // build a frame and slide to a curSlide\n\n    this.sliderContainerCreate();\n    this.callbackHandler(cb, delay);\n  }\n  /**\r\n   * Insert item method\r\n   * @param item\r\n   * @param index\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  insertElem(item, index, cb, delay) {\n    this.innerItems.splice(index, 0, item);\n    this.sliderContainerCreate();\n    this.callbackHandler(cb, delay);\n  }\n  /**\r\n   * Prepend item method\r\n   * @param item\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  prependElem(item, cb, delay) {\n    this.insertElem(item, 0);\n    this.callbackHandler(cb, delay);\n  }\n  /**\r\n   * Append item method\r\n   * @param item\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  appendElem(item, cb, delay) {\n    this.insertElem(item, this.innerItems.length + 1);\n    this.callbackHandler(cb, delay);\n  }\n  /**\r\n   * Autoplay method\r\n   */\n\n\n  autoPlay() {\n    this.myTimer = setInterval(() => this.nextSlide(), this.config.autoplayDuration);\n  }\n  /**\r\n   * init pagination\r\n   */\n\n\n  paginationInit() {\n    if (this.paginationVisible === true && this.config.pagination) {\n      const availableItems = this.innerItems.length;\n      const visibleSlides = this.visibleSlides;\n      const paginationCount = Math.ceil(availableItems / visibleSlides);\n      this.paginationContainer = document.createElement('div');\n      this.paginationContainer.classList.add(this.config.paginationContainer);\n      this.paginationItemSelector = this.config.paginationItemSelector ? this.config.paginationItemSelector : this.config.paginationContainer + '--item';\n\n      for (let i = 0; i < paginationCount; i += 1) {\n        const jumpTo = (i + 1) * visibleSlides - visibleSlides > this.innerItems.length ? this.innerItems.length : (i + 1) * visibleSlides - visibleSlides;\n        this.paginationItem = document.createElement('span');\n        this.paginationItem.classList.add(this.paginationItemSelector);\n\n        if (this.config.paginationType === 'dots') {\n          this.paginationItem.classList.add(this.paginationItemSelector + '--dots');\n        }\n\n        this.paginationItem.dataset.pagination = '' + (i + 1);\n\n        if (this.config.paginationType !== 'dots') {\n          this.paginationItem.innerHTML = this.paginationItem.dataset.pagination;\n        }\n\n        this.paginationItem.addEventListener('click', () => this.goToSlide(jumpTo));\n        this.paginationContainer.appendChild(this.paginationItem);\n      }\n\n      this.selector.appendChild(this.paginationContainer);\n    }\n  }\n  /**\r\n   * update pagination based on current slide\r\n   */\n\n\n  paginationUpdate() {\n    if (this.paginationVisible === true && this.config.pagination) {\n      this.paginationItemSelector = this.config.paginationItemSelector ? this.config.paginationItemSelector : this.config.paginationContainer + '--item';\n      const paginationItems = this.selector.querySelectorAll('.' + this.paginationItemSelector);\n      const getPaginationItem = Math.ceil(this.curSlide / this.visibleSlides) + 1;\n\n      for (let i = 0; i < paginationItems.length; i += 1) {\n        paginationItems[i].classList.remove(this.config.paginationItemActiveClass);\n\n        if (getPaginationItem === Number(paginationItems[i].dataset.pagination)) {\n          paginationItems[i].classList.add(this.config.paginationItemActiveClass);\n        }\n      }\n    }\n  }\n  /**\r\n   * sets visibility of pagination based on viewport\r\n   * (boolean or object value for responsive changes)\r\n   */\n\n\n  paginationVisibility() {\n    if (typeof this.config.paginationVisible === 'boolean') {\n      this.paginationVisible = this.config.paginationVisible;\n    } else if (typeof this.config.paginationVisible === 'object') {\n      this.paginationVisible = true;\n      Object.keys(this.config.paginationVisible).forEach(key => {\n        if (window.innerWidth >= Number(key)) {\n          this.paginationVisible = this.config.paginationVisible[Number(key)];\n        }\n      });\n    }\n  }\n  /**\r\n   * add arrows\r\n   */\n\n\n  arrowsInit() {\n    if (this.arrowsVisible === true && this.config.arrows) {\n      this.prevSelector = document.createElement('button');\n      this.prevSelector.setAttribute('class', this.config.prevArrowClass);\n      this.prevSelector.innerHTML = this.config.prevArrowInner;\n      this.selector.appendChild(this.prevSelector);\n      this.nextSelector = document.createElement('button');\n      this.nextSelector.setAttribute('class', this.config.nextArrowClass);\n      this.nextSelector.innerHTML = this.config.nextArrowInner;\n      this.selector.appendChild(this.nextSelector);\n      this.prevSelector.addEventListener('click', () => this.prevSlide());\n      this.nextSelector.addEventListener('click', () => this.nextSlide());\n    }\n  }\n  /**\r\n   * sets visibility of arrows based on viewport\r\n   * (boolean or object value for responsive changes)\r\n   */\n\n\n  arrowsVisibility() {\n    if (typeof this.config.arrowsVisible === 'boolean') {\n      this.arrowsVisible = this.config.arrowsVisible;\n    } else if (typeof this.config.arrowsVisible === 'object') {\n      this.arrowsVisible = true;\n      Object.keys(this.config.arrowsVisible).forEach(key => {\n        if (window.innerWidth >= Number(key)) {\n          this.arrowsVisible = this.config.arrowsVisible[Number(key)];\n        }\n      });\n    }\n  }\n  /**\r\n   * add keyboard navigation\r\n   */\n\n\n  keyboardNavigation() {\n    document.addEventListener('keydown', e => {\n      if (e.key === 'ArrowLeft') {\n        this.prevSlide();\n      }\n\n      if (e.key === 'ArrowRight') {\n        this.nextSlide();\n      }\n    });\n  }\n  /**\r\n   * add active class to visible slides\r\n   */\n\n\n  activeClass() {\n    const curSlide = this.config.loop ? this.curSlide + this.visibleSlides : this.curSlide;\n    const classCount = this.visibleSlides;\n    const availableItems = this.selector.querySelectorAll(this.config.itemSelector);\n    const itemSelector = this.config.itemSelector.replace('.', '');\n    const activeClass = itemSelector + '-active';\n\n    if (availableItems) {\n      for (let i = 0; i < availableItems.length; i += 1) {\n        availableItems[i].classList.remove(activeClass);\n      }\n\n      for (let j = 0; j < classCount; j += 1) {\n        availableItems[curSlide + j].classList.add(activeClass);\n      } // centered mode\n\n\n      if (this.config.centerMode) {\n        this.centerMode(itemSelector);\n      }\n    }\n  }\n  /**\r\n   * add center classes to items in the middle of visible slides\r\n   * @param itemSelector\r\n   */\n\n\n  centerMode(itemSelector) {\n    const curSlide = this.config.loop ? this.curSlide + this.visibleSlides : this.curSlide;\n    const classCount = this.visibleSlides;\n    const availableItems = this.selector.querySelectorAll('.' + itemSelector);\n    const centeredItem = Math.ceil(classCount / 2);\n    const centerClass = itemSelector + '-center';\n    const halfCenterClass = itemSelector + '-half-center';\n    const quarterCenterClass = itemSelector + '-quarter-center';\n\n    if (availableItems) {\n      for (let i = 0; i < availableItems.length; i += 1) {\n        availableItems[i].classList.remove(centerClass);\n        availableItems[i].classList.remove(halfCenterClass);\n        availableItems[i].classList.remove(quarterCenterClass);\n      }\n    }\n\n    for (let j = 0; j < classCount; j += 1) {\n      if (availableItems[curSlide + j]) {\n        availableItems[curSlide + centeredItem - 1].classList.add(centerClass);\n\n        if (classCount % 2 === 0) {\n          availableItems[curSlide + centeredItem].classList.add(centerClass);\n\n          if (classCount >= 6 && this.config.centerModeRange) {\n            availableItems[curSlide + centeredItem - 2].classList.add(halfCenterClass);\n            availableItems[curSlide + centeredItem + 1].classList.add(halfCenterClass);\n          }\n        } else if (classCount >= 5 && classCount % 2 !== 0 && this.config.centerModeRange) {\n          availableItems[curSlide + centeredItem - 2].classList.add(halfCenterClass);\n          availableItems[curSlide + centeredItem].classList.add(halfCenterClass);\n\n          if (classCount >= 7) {\n            availableItems[curSlide + centeredItem - 3].classList.add(quarterCenterClass);\n            availableItems[curSlide + centeredItem + 1].classList.add(quarterCenterClass);\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * callback handler\r\n   * @param callback\r\n   * @param delay\r\n   */\n\n\n  callbackHandler(callback, delay) {\n    if (delay && callback) {\n      setTimeout(() => {\n        callback.call(this);\n      }, delay);\n    } else if (!delay && callback) {\n      callback.call(this);\n    }\n  }\n  /**\r\n   * click event handler\r\n   * @param e\r\n   */\n\n\n  clickHandler(e) {\n    // prevent clicking link on dragging\n    // (note: if subitems inside slide, you need to set `pointer-events: none` via css.)\n    if (this.drag.preventClick) {\n      e.preventDefault();\n    }\n\n    this.drag.preventClick = false;\n  }\n  /**\r\n   * mousedown event handler\r\n   * @param e\r\n   */\n\n\n  mousedownHandler(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.pointerDown = true;\n    this.drag.startXAxis = e.pageX;\n  }\n  /**\r\n   * mouseup event handler\r\n   * @param e\r\n   */\n\n\n  mouseupHandler(e) {\n    e.stopPropagation();\n    this.pointerDown = false;\n    this.selector.style.cursor = '-webkit-grab';\n    this.isTransition();\n\n    if (this.drag.endXAxis) {\n      this.updateAfterDrag();\n    }\n\n    this.stopDragging();\n  }\n  /**\r\n   * mousemove event handler\r\n   * @param e\r\n   */\n\n\n  mousemoveHandler(e) {\n    e.preventDefault();\n\n    if (this.pointerDown) {\n      if (e.target.nodeName === 'A') {\n        this.drag.preventClick = true;\n      }\n\n      this.drag.endXAxis = e.pageX;\n      this.selector.style.cursor = '-webkit-grabbing';\n      this.sliderInnerWrapper.style.transition = `all 0ms ${this.config.easeMode}`;\n      const curSlide = this.config.loop ? this.curSlide + this.visibleSlides : this.curSlide;\n      const currentOffset = curSlide * (this.selectorWidth / this.visibleSlides);\n      const dragOffset = this.drag.endXAxis - this.drag.startXAxis;\n      const offset = this.config.rtl ? currentOffset + dragOffset + (this.config.gap ? this.config.gap : 0) : currentOffset - dragOffset - (this.config.gap ? this.config.gap : 0);\n      this.sliderInnerWrapper.style.transform = `translate3d(${(this.config.rtl ? 1 : -1) * offset}px, 0, 0)`;\n    }\n  }\n  /**\r\n   * mouseleave event handler\r\n   * @param e\r\n   */\n\n\n  mouseleaveHandler(e) {\n    if (this.pointerDown) {\n      this.pointerDown = false;\n      this.selector.style.cursor = '-webkit-grab';\n      this.drag.endXAxis = e.pageX;\n      this.drag.preventClick = false;\n      this.isTransition();\n      this.updateAfterDrag();\n      this.stopDragging();\n    }\n  }\n  /**\r\n   * touchstart event handler\r\n   * @param e\r\n   */\n\n\n  touchstartHandler(e) {\n    e.stopPropagation();\n    this.drag.startXAxis = e.touches[0].pageX;\n    this.drag.startYAxis = e.touches[0].pageY;\n    this.pointerDown = true;\n  }\n  /**\r\n   * touchend event handler\r\n   * @param e\r\n   */\n\n\n  touchendHandler(e) {\n    e.stopPropagation();\n    this.pointerDown = false;\n    this.isTransition();\n\n    if (this.drag.endXAxis) {\n      this.updateAfterDrag();\n    }\n\n    this.stopDragging();\n  }\n  /**\r\n   * touchmove event handler\r\n   * @param e\r\n   */\n\n\n  touchmoveHandler(e) {\n    e.stopPropagation();\n\n    if (this.drag.dragOff === null) {\n      this.drag.dragOff = Math.abs(this.drag.startYAxis - e.touches[0].pageY) < Math.abs(this.drag.startXAxis - e.touches[0].pageX);\n    }\n\n    if (this.pointerDown && this.drag.dragOff) {\n      const curSlide = this.config.loop ? this.curSlide + this.visibleSlides : this.curSlide;\n      const currentOffset = curSlide * (this.selectorWidth / this.visibleSlides);\n      const dragOffset = this.drag.endXAxis - this.drag.startXAxis;\n      const offset = this.config.rtl ? currentOffset + dragOffset + (this.config.gap ? this.config.gap : 0) : currentOffset - dragOffset - (this.config.gap ? this.config.gap : 0);\n      e.preventDefault();\n      this.drag.endXAxis = e.touches[0].pageX;\n      this.sliderInnerWrapper.style.transition = `0 all ${this.config.easeMode} `;\n      this.sliderInnerWrapper.style.transform = `translate3d(${(this.config.rtl ? 1 : -1) * offset}px, 0, 0)`;\n    }\n  }\n  /**\r\n   * destroy method\r\n   * @param restore\r\n   * @param cb\r\n   * @param delay\r\n   */\n\n\n  destroy(restore = false, cb, delay) {\n    // remove listeners\n    window.removeEventListener('resize', this.resizeHandler);\n    this.selector.removeEventListener('click', this.clickHandler);\n    this.selector.removeEventListener('mouseup', this.mouseupHandler);\n    this.selector.removeEventListener('mousedown', this.mousedownHandler);\n    this.selector.removeEventListener('mouseleave', this.mouseleaveHandler);\n    this.selector.removeEventListener('mousemove', this.mousemoveHandler);\n    this.selector.removeEventListener('touchstart', this.touchstartHandler);\n    this.selector.removeEventListener('touchend', this.touchendHandler);\n    this.selector.removeEventListener('touchmove', this.touchmoveHandler); // restore to initial markup\n\n    if (restore) {\n      const slides = document.createDocumentFragment();\n\n      for (let i = 0; i < this.innerItems.length; i += 1) {\n        slides.appendChild(this.innerItems[i]);\n      }\n\n      this.selector.innerHTML = '';\n      this.selector.appendChild(slides).removeAttribute('style');\n    }\n\n    this.callbackHandler(cb, delay);\n  }\n\n}\n\nwindow.Expand = Expand;\nexports[\"default\"] = Expand;\nmodule.exports = exports.default;\n\n//# sourceURL=webpack://Expand/../src/expand.js?");

/***/ }),

/***/ "./assets/demo.scss":
/*!**************************!*\
  !*** ./assets/demo.scss ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://Expand/./assets/demo.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./assets/demo.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/demo.scss");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});